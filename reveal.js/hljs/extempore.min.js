hljs.registerLanguage("extempore",(()=>{"use strict";return e=>{
var a="[\\w\\!\\$%&\\*\\+,\\/:<=>\\?@\\^~\\|\\-]+",i="[\\w\\.\\!\\-]+",n="[\\w\\[\\]\\{\\}<>,\\*/\\|\\!\\-]+",r="(lambda|define|if|else|cond|and|or|let|begin|set\\!|map|for\\-each)",t="(do|delay|quasiquote|unquote\\-splicing|eval|case|let\\*|letrec|quote)",l="(bind\\-func|bind\\-val|bind\\-type|bind\\-alias|bind\\-poly|bind\\-dylib|bind\\-lib\\-func|bind\\-lib\\-val)",s="(letz|memzone|cast|convert|dotimes|doloop)",c="(\\*|\\+|-|/|<|<=|=|>|>=|%|abs|acos|angle|append|apply|asin|assoc|assq|assv|atan|boolean\\?|caaaar|caaadr|caaar|caadar|caaddr|caadr|caar|cadaar|cadadr|cadar|caddar|cadddr|caddr|cadr|car|cdaaar|cdaadr|cdaar|cdadar|cdaddr|cdadr|cdar|cddaar|cddadr|cddar|cdddar|cddddr|cdddr|cddr|cdr|ceiling|cons|cos|floor|length|list|log|max|member|min|modulo|not|reverse|round|sin|sqrt|substring|tan|println|random|null\\?|callback|now)",o="(call\\-with\\-current\\-continuation|call\\-with\\-input\\-file|call\\-with\\-output\\-file|call\\-with\\-values|call/cc|char\\->integer|char\\-alphabetic\\?|char\\-ci<=\\?|char\\-ci<\\?|char\\-ci=\\?|char\\-ci>=\\?|char\\-ci>\\?|char\\-downcase|char\\-lower\\-case\\?|char\\-numeric\\?|char\\-ready\\?|char\\-upcase|char\\-upper\\-case\\?|char\\-whitespace\\?|char<=\\?|char<\\?|char=\\?|char>=\\?|char>\\?|char\\?|close\\-input\\-port|close\\-output\\-port|complex\\?|current\\-input\\-port|current\\-output\\-port|denominator|display|dynamic\\-wind|eof\\-object\\?|eq\\?|equal\\?|eqv\\?|even\\?|exact\\->inexact|exact\\?|expt|force|gcd|imag\\-part|inexact\\->exact|inexact\\?|input\\-port\\?|integer\\->char|integer\\?|interaction\\-environment|lcm|list\\->string|list\\->vector|list\\-ref|list\\-tail|list\\?|load|magnitude|make\\-polar|make\\-rectangular|make\\-string|make\\-vector|memq|memv|negative\\?|newline|null\\-environment|number\\->string|number\\?|numerator|odd\\?|open\\-input\\-file|open\\-output\\-file|output\\-port\\?|pair\\?|peek\\-char|port\\?|positive\\?|procedure\\?|quotient|rational\\?|rationalize|read\\-char|real\\-part|real\\?|remainder|scheme\\-report\\-environment|set\\-car\\!|set\\-cdr\\!|string\\->list|string\\->number|string\\->symbol|string\\-append|string\\-ci<=\\?|string\\-ci<\\?|string\\-ci=\\?|string\\-ci>=\\?|string\\-ci>\\?|string\\-copy|string\\-fill\\!|string\\-length|string\\-ref|string\\-set\\!|string<=\\?|string<\\?|string=\\?|string>=\\?|string>\\?|string\\?|symbol\\->string|symbol\\?|transcript\\-off|transcript\\-on|truncate|values|vector\\->list|vector\\-fill\\!|vector\\-length|vector\\?|with\\-input\\-from\\-file|with\\-output\\-to\\-file|write|write\\-char|zero\\?)",d="(exp|read|string|vector)",m="(toString|afill\\!|pfill\\!|tfill\\!|tbind|vfill\\!|array\\-fill\\!|pointer\\-fill\\!|tuple\\-fill\\!|vector\\-fill\\!|free|~|cset\\!|cref|&|bor|ang\\-names|<<|>>|nil|printf|sprintf|null|now|pset\\!|pref\\-ptr|vset\\!|vref|aset\\!|aref\\-ptr|tset\\!|tref\\-ptr|salloc|halloc|zalloc|alloc|schedule|exp|log|sin|cos|tan|asin|acos|atan|sqrt|expt|floor|ceiling|truncate|round|llvm_printf|push_zone|pop_zone|memzone|callback|llvm_sprintf|make\\-array|array\\-set\\!|array\\-ref\\-ptr|pointer\\-set\\!|pointer\\-ref\\-ptr|stack\\-alloc|heap\\-alloc|zone\\-alloc|make\\-tuple|tuple\\-set\\!|tuple\\-ref\\-ptr|closure\\-set\\!|closure\\-ref|pdref|impc_null|bitcast|void|ifret|ret\\->|clrun\\->|make\\-env\\-zone|<>|dtof|ftod|i1tof|i1tod|i1toi8|i1toi32|i1toi64|i8tof|i8tod|i8toi1|i8toi32|i8toi64|i32tof|i32tod|i32toi1|i32toi8|i32toi64|i64tof|i64tod|i64toi1|i64toi8|i64toi32)",b="(tuple\\-ref|array\\-ref|aref|tref|pref|pointer\\-ref|make\\-env)",g={
className:"literal",begin:"(#t|#f)"},p={className:"type",lexemes:n,relevance:10,
variants:[{
begin:":(i1|i8|i32|i64|double|float|SAMPLE|NoteData|DSP|type_of_argument1|type_of_argument2)[\\w\\[\\]\\{\\}<>,\\*/\\|\\!\\-]*"
},{className:"variable",begin:"\\*\\w",end:"\\*",lexemes:a},{
begin:":?(<"+n+">|\\|"+n+"\\||/"+n+"/|"+n+"\\*)\\**"}]},u={className:"number",
variants:[{begin:"(\\-|\\+|\\.)?\\d+([./]\\d*)?",relevance:0},{
begin:"(\\-|\\+|\\.)?\\d+([./]\\d*)?[\\+\\-](\\-|\\+|\\.)?\\d+([./]\\d*)?i",
relevance:0},{begin:"#b[0-1]+(/[0-1]+)?"},{begin:"#o[0-7]+(/[0-7]+)?"},{
begin:"#x[0-9a-f]+(/[0-9a-f]+)?"}]},f={className:"string",variants:[{begin:'"',
end:'"'},{begin:"(#\\\\"+a+"|#\\\\.)"}],contains:[{className:"doctag",
begin:"@\\w+",lexemes:i}]},v=[e.COMMENT(";","$",{relevance:0
}),e.COMMENT("#\\|","\\|#")],x={className:"variable",begin:i,relevance:0},h={
className:"symbol",begin:"'"+a},N={className:"symbol",begin:"('|#|`|,@|,|\\.)"
},w={variants:[{begin:/'/},{begin:"`"}],contains:[{begin:"\\(",end:"\\)",
contains:["self",g,f,u,x,h,N]}]},y=[{className:"variable",begin:r+a,lexemes:a},{
className:"keyword",begin:r,lexemes:a}],k=[{className:"variable",begin:t+a,
lexemes:a},{className:"keyword",begin:t,lexemes:a},{className:"variable",
begin:"unquote[\\w\\!\\$%&\\*\\+,\\/:<=>\\?@\\^~\\|\\-]+",lexemes:a},{
className:"keyword",begin:"unquote",lexemes:a}],q=[{className:"variable",
begin:s+i,lexemes:i},{className:"keyword",begin:s,lexemes:i}],z=[{
className:"variable",begin:c+a,lexemes:a},{className:"funciton",begin:c,
lexemes:a},{className:"variable",
begin:"print[\\w\\!\\$%&\\*\\+,\\/:<=>\\?@\\^~\\|\\-]+",lexemes:a},{
className:"funciton",begin:"print",lexemes:a}],_=[{className:"variable",
begin:o+a,lexemes:a},{className:"funciton",begin:o,lexemes:a},{
className:"variable",begin:d+a,lexemes:a},{className:"funciton",begin:d,
lexemes:a}],P=[{className:"variable",begin:m+i,lexemes:i},{className:"funciton",
begin:m,lexemes:i},{className:"variable",begin:b+i,lexemes:i},{
className:"funciton",begin:b,lexemes:i},{className:"variable",
begin:"(tuple|array)[\\w\\.\\!\\-]+",lexemes:i},{className:"funciton",
begin:"(tuple|array)",lexemes:i}],$={endsParent:!0},M={variants:[{begin:"\\(",
end:"\\)"},{begin:"\\[",end:"\\]"}],contains:[{className:"keyword",lexemes:a,
end:"$",variants:[{className:"variable",begin:l+i},{begin:l,relevance:10},{
className:"variable",begin:"bind\\-lib[\\w\\.\\!\\-]+"},{begin:"bind\\-lib",
relevance:10},{className:"variable",begin:"define[\\w\\.\\!\\-]+"},{
begin:"define"}],contains:[{className:"string",begin:'"',end:'"',endsParent:!0
},e.inherit(e.TITLE_MODE,{begin:"[\\w\\!\\$%&\\*\\+,\\/<=>\\?@\\^~\\|\\-]+",
endsParent:!0})]},{lexemes:a,endsParent:!0,variants:[].concat(q,P)},{lexemes:a,
endsParent:!0,variants:[].concat(k,_)},$]}
;return $.contains=[g,u,p,f,h,N,w].concat(y,z),
$.contains.push(x,M),$.contains.concat(v),{name:"extempore",
aliases:["xtlang","xtm"],disableAutodetect:!0,illegal:/\S/,contains:[{
className:"meta",begin:"^#!",end:"$"},u,p,f,h,N,w,x,M].concat(v)}}})());
